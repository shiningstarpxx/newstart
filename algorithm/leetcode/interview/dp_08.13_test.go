/**
 * @Author: pei, xingxin
 * @mail: xingxinpei@gmail.com
 * @Description:
 * @File: dp_08.13_test.go
 * @Version: 1.0.0
 * @Data: 2021/9/4 10:35 AM
 */
package interview

import (
	"reflect"
	"testing"
)

func Test_pileBox(t *testing.T) {
	type args struct {
		box [][]int
	}
	tests := []struct {
		name string
		args args
		want int
	}{
		{
			"simple test",
			args{
				[][]int{{1, 1, 1}, {2, 3, 4}, {2, 6, 7}, {3, 4, 5}},
			},
			10,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := pileBox(tt.args.box); got != tt.want {
				t.Errorf("pileBox() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_sortBox(t *testing.T) {
	type args struct {
		box [][]int
	}
	tests := []struct {
		name string
		args args
		want [][]int
	}{
		{
			"simple test",
			args{
			[][]int{{1, 1, 1}, {2, 6, 7}, {3, 4, 5}, {2, 3, 4}},
			},
			[][]int{{1, 1, 1}, {2, 3, 4}, {2, 6, 7}, {3, 4, 5}},
		},
		{
			"edge case",
			args{
				[][]int{{9, 9, 10}, {8, 10, 9}, {9, 8, 10}, {9, 8, 10}, {10, 8, 8}, {9, 8, 9}, {9, 8, 8},
					{8, 9, 10}, {10, 9, 10}, {8, 8, 10}, {10, 9, 10}, {10, 9, 8}, {8, 9, 9}, {9, 10, 8}, {8, 9, 9},
					{10, 10, 9}, {8, 9, 10}, {8, 10, 10}, {8, 9, 10}, {10, 10, 8}, {10, 10, 9}, {9, 10, 10}, {10, 8, 9},
					{10, 10, 9}, {8, 9, 10}, {8, 8, 9}, {8, 10, 10}, {9, 9, 10}, {10, 8, 8}, {10, 10, 8}, {8, 9, 9},
					{8, 9, 8}, {10, 10, 8}, {8, 10, 8}, {10, 9, 10}, {9, 9, 10}, {9, 9, 9}, {8, 9, 8}, {9, 8, 8},
					{8, 9, 10}, {10, 10, 8}, {9, 9, 9}, {10, 10, 10}, {10, 9, 8}, {9, 8, 9}, {8, 8, 10}, {8, 8, 8},
					{8, 8, 8}, {8, 9, 10}, {10, 9, 8}, {8, 10, 8}, {8, 10, 10}, {9, 10, 10}, {8, 8, 9}, {9, 9, 9},
					{10, 8, 8}, {8, 10, 10}, {9, 10, 9}, {9, 9, 8}, {8, 10, 9}, {9, 8, 8}, {9, 9, 10}, {9, 10, 10},
					{8, 8, 10}},
			},
			[][]int{{8,8,8},{8,8,8},{8,8,9},{8,8,9},{8,8,10},{8,8,10},{8,8,10},{8,9,8},{8,9,8},{8,9,9},{8,9,9},
				{8,9,9},{8,9,10},{8,9,10},{8,9,10},{8,9,10},{8,9,10},{8,9,10},{8,10,8},{8,10,8},{8,10,9},{8,10,9},
				{8,10,10},{8,10,10},{8,10,10},{8,10,10},{9,8,8},{9,8,8},{9,8,8},{9,8,9},{9,8,9},{9,8,10},{9,8,10},
				{9,9,8},{9,9,9},{9,9,9},{9,9,9},{9,9,10},{9,9,10},{9,9,10},{9,9,10},{9,10,8},{9,10,9},{9,10,10},{9,10,10},
			{9,10,10},{10,8,8},{10,8,8},{10,8,8},{10,8,9},{10,9,8},{10,9,8},{10,9,8},{10,9,10},{10,9,10},{10,9,10},
			{10,10,8},{10,10,8},{10,10,8},{10,10,8},{10,10,9},{10,10,9},{10,10,9},{10,10,10}},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := sortBox(tt.args.box); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("sortBox() = %v, want %v", got, tt.want)
			}
		})
	}
}